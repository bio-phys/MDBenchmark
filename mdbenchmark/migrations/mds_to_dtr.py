# -*- Mode: python; tab-width: 4; indent-tabs-mode:nil; coding:utf-8 -*-
# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4 fileencoding=utf-8
#
# MDBenchmark
# Copyright (c) 2017-2020 The MDBenchmark development team and contributors
# (see the file AUTHORS for the full list of names)
#
# MDBenchmark is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# MDBenchmark is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with MDBenchmark.  If not, see <http://www.gnu.org/licenses/>.
import fnmatch
import json
import os
from glob import glob

import datreant as dtr

from mdbenchmark import console

DOCUMENTATION_URL = "https://docs.mdbenchmark.org/en/latest/upgrading.html"
MIGRATION_WARNING = (
    "You seem to have upgraded from a previous MDBenchmark version. "
    "Your current Python environment is incompatible with our required dependencies.\n"
    "Please remove the following Python packages: {}\n"
    "If you need help, please consult the documentation on upgrading: {}"
)


def ensure_correct_environment():
    old_packages = []
    import datreant as dtr

    try:
        version = dtr.__version__  # noqa: F401,F841
    except AttributeError:
        old_packages.append("datreant.core")

    try:
        import datreant.data  # noqa: F401

        old_packages.append("datreant.data")
    except ImportError:
        pass

    try:
        import mdsynthesis  # noqa: F401

        old_packages.append("mdsynthesis")
    except ImportError:
        pass

    if old_packages:
        console.error(MIGRATION_WARNING, ", ".join(old_packages), DOCUMENTATION_URL)


def search_mdsynthesis_sim_files(folder):
    """Search for `Sim.*.json` files generated by `mdsynthesis`."""
    bundles = []
    for root, _, filenames in os.walk(folder):
        for filename in fnmatch.filter(filenames, "Sim*"):
            bundles.append(os.path.join(root, filename))

    return bundles


def convert_to_datreant(bundles):
    """Convert old `mdsynthesis` data structures to vanilla `datreant.

    Converts old `Sim.[...].json` files used in MDSynthesis<1.0 to datreant>1.0
    `.datreant` folders.
    """
    for bundle in bundles:
        with open(bundle) as fh:
            sim = json.load(fh)

        folder = "/".join(bundle.split("/")[0:-1])
        dtr.Treant(folder, categories=sim["categories"], tags=sim["tags"])

        # We want to remove two files, both `Sim.*.json` and `.Sim.*.json.proxy`.
        files_to_remove = [bundle, glob(os.path.join(folder, ".Sim*"))]
        for file in files_to_remove:
            # The proxy file will be a list.
            # We try to split the globbing result, if we fail, we skip this loop.
            if isinstance(file, list):
                try:
                    file = file[0]
                except IndexError:
                    continue
            os.remove(file)


def migrate_to_datreant(directory):
    """Perform the `mdsynthesis` to `datreant` migration."""
    bundles = search_mdsynthesis_sim_files(directory)
    if bundles:
        console.info("Converting old benchmark metadata to new format!")
        convert_to_datreant(bundles)
        console.info("Finished converting old benchmarks to new format!")

    return
